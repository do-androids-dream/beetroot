# def minion_game(string):
#     vowels = "AEIOU"
#     stuart = 0
#     kevin = 0
#     length = len(string)
#     print(length)
#     for letter in string:
#         if letter not in vowels:
#             stuart += length - ind
#         else:
#             kevin += length - ind
#
#     if kevin > stuart:
#         print(f"Kevin {kevin}")
#     elif stuart > kevin:
#         print(f"Stuart {stuart}")
#     else:
#         print("Draw")
#
# if __name__ == '__main__':
#     s = "BFEREZKMEYKTNZZTCVZRWZSIIRLEUWGXROAHKCRZNZKUUFWEDJVPMGNGDVHNIGUNKDAUFOIYXVMVBNBMLDQAYJSXNJFVZCERKWJXYUHHLYEBBVRQTXJMGVNFKYHHPZGZOLIBDNTHTZPDJNASKAQPCTXETRZBGIPYHZHOUJPBPRCEKTOWENMEHJVEPPKQISJLTWQOLATVIFOBEXUJPMKXGUDFHBEGMFCCUXBJMXFOKRCICSPQQFFJZTIHMLURFCCVZYIPYGDTJXGXSUAHOKLVYFMSHOSMNNIIRAUPFAAOQHLQCTUGCMCQMOQUXMYBQXJVYRIIQENPTMBYVOVPFYDOJKVUWKDHDWYNVDAMUBBPNTEZZSDADELGNILAZTTMUMWGKXPSQDYVTGXWGDLAZQIJADPTFIJSLIDTLEJFJGWMOCPYLAFMVHQHRLGSIQJXQQKJAVBMFKEENTJZWBDTDVUBZHVTDFCLLETZJRMYMIQYVWWUOIVPGTNZFNTDKBVZKKFDTSQTVSRAADPWIMXEEJHBFRDDDXMOYEHCUHSBWZLHVCKZKUTVWGNTEPYPNGCDMFNKWGARVDMLZJDPIKLWYULIMBOHVOSWZICGZGBKBODQCVIAVTDZQFYLCRWIQBBGMGGERSLPGYASHNYRVVWAVJYASVATKHQNJNYFCUDXKRDNBWHLRIOFVHVFOJQGGAMKNOVDVKJVBRNAIUBZQEBPWKXZUCIRQDRTRGWKTYIJZNBRGQYKOAQCPCRKKXPAAHWLKSJUJZOOIQCSBPDCWHANQPWSIYDBZFCIEWZKYOMMHCHONSOGVMEGGOUKXLGFVOUSIYFFLZAPTLJYWIQVXZZPYVTAOQFQURGULWGFKBYIKJOCSITSBFRIJINCOBHGZRSFYTXFQRFYCIDLXFCASUQAYTHGNBPFTXLUZIXHNXFJIJQABSGNQDOAWXIDSSMLPHHQXYJGVXEJVDVJNCLLBDAYUQFDRGFAAWMAWZZVDAPLHYDU"
#     minion_game(s)

# def merge_the_tools(string, k):
#     # your code goes here
#     quant = len(string) // k
#     for i in range(quant):
#         start = i * len(string) // quant
#         end = (i + 1) * len(string) // quant
#         to_print = ""
#         for l in string[start:end]:
#             to_print += l if l not in to_print else ""
#         print(to_print)
#
#
# if __name__ == '__main__':
#     string, k = "PAEWXBZHMOAJYLYRBEEBMXOITMNOGEEVEKTCNSLZINKIALZCRGDFFTNYFDPLHVJMHCQWXBVHRIQRVPTOVWTAPHBWKSKTPTFWXXSWBPESZUJWLDKJBELTNOPXGZQXUYVUXPQYHWSIQCFEHPNKVYDINTHVUYVRYQLVGDWNAOXSSCYBULMPMPYBKHWFHRYFKJDQOBFORCJKHHNBVZSHRSIBAGIHAGPKRSCGVJWMLFWUPKVKLOTCGBGIJQQJZFTQZXYUGVGUCFORRKDCAWHIZPRJFJSGOOXPLXJSURMXWAQNMUSOSZZSQQBVBVCPJBGXARPVIDSFFKUUEMIZNJRDZSBANFRZIZWIQNDZSXGZIATOPENCNGIPYJROOLPWKNGBCKAUJIVRIRIZVXEKEMBEVTSLEJJQWPRAZTWLBSEMJMLGMPQQDSUYNPLRYUJXKBXLWUWAOBMXPZDBRTTUNOVAFGTFDDCPGCACYZCMCQJTQOXHJQDXGYZLHVRKYTZGXBKVCPJGFSAXIZGSPKRWKQHRLADLUERTGERKTATYVVWDUCVJOMHZFRQSRWENAXHIBYTUYMVVJTZDVWOMLWLSNDKEZOUAOBIRBDOBRJXACYFZUULHQYZFCKLDAFFQIOIJTWLNFKPJIVKEPWMHWLMAXXEYFJONZYXVUKIBUXMESXIJVUQRICSFCWFJHUWJUVEPFOSBLFFGCORXKIQSMIYQGFZQBWZWRDNZRFCEMIMQYEPIMGDAQDRXIQPKOOGITTHMAJQNTFDTJTCXBHXRKOQSHFEVVKDOFMAGYTVRYALHTPGWYFOIUGCDMHYHTCYBOYJMTEGRETAAKGWIMMQITUNHBLOXPOYGPJSINAATVCVFJUNXGFHZCUIFHXCXNCDCLXLAYNWTPRBALQZUYGVACEFKDKHQMMTAJGCJVYFMQGNDYOXWXTWZZELCOSSCGNEQVHZQFEDXMSDLGAHDVGFUMQYCLRERGLHCSJUZPZXCRAPYCYDAGIWSZVUKOBBWMLYEUVFLUCPMEEMJDPJLAHEZEYLSBOPNZPTVMZHHDYVKDHTIYETANZBSAMMBBDRCVMAHNHORHJDKSYUTEOTRNVJPJYRMBIPWUPEIYUBFGESAEMVICRZSOLHXLYMMIBLFSRNSNQZTWRWAGRKKKLCYWMWJMIWVLJCFARXPHYLFQHFYARILCLJBZHKLRIIERKJTBIJIHUPZDUXDLHOQUARTHBFBKNFBYRXBZGMICBHFYGIJQZZKZQEIULJEAPHAIGCHOOQQRZVPIGZYFAKGTQOPDATERCGZJIGXYYQQALFKTGKAJUGELXTOZOUQSBPBLXBMYREYELKASUADOJJBIEQHSMXMNMQBLRNJKRJQCVQWPTBECKHKOZRIMOVBCLCPEPBQGKGLIZHXSJDWVLIKKZUWPRYTCAIISJAYWHJEITDCCHYXSGJEHGDYXBRCDBKXNLYJUHPECSGGZGGTOPYXVDVVGMXLNJJAWHLSQCWTVEZWKFSAXSXUVSPBGMMWWVYSEKLVOJOLOPKAXCDUWAORVGUBSIZQGYLKKWFYHVKVNUYKYBGUDWNYCHCXRBNXZYKJWRKEPUBCOZOMCWIGUVEXEGWVKLVJMFVKWFONZSRPTFDWDLCYIGXMPTJZGEKSLFDKKTXLLPCFWFBASFYANXOCSYDYEORSVWCGPBTDQWKPDNPYSPAFOPKGPNEVDXNZTRHLTAOLYYAELRCFICKWTUCIKJGNGTMCLTNGWDRWDUAQLCVWFHUACXLOIRBQMOSZJHFHMZERTEHGHECOMXOQWZEESHWFXPGHYMONLSEGXOMGUPWGOKYKMEQGOMLLDSSEGJRTBXZALLIGCEOQRPCFVSLJHZXKTPOZAHUEFTESGNAJTRBKGEPDWBPDAMQTBGUEQOIVJMPPBQYVJCHPGXUEAJICVAXZGRDWHLTQZLFBDGYMIHDQGXUGHEKEEHDLAGJHTDZTQHWTPWFZDIPKFJSOODTUKWHLFRUYWUTMBPHQLMRRWGBBRTSHWLCJJJUOCOPYKIMNATFNHWEDCFFUBZDXKFITRCKTTBUFLGTLCYZJXDNZLUVMTZLFGUAXYMTTNNZBVUOZUNJRTYRGUOUPPFWWBWVALOVADUBZQQYLFJCAHVGDMASBIOZJNXLYLJYPFAQWSOHZYLAHHILTLFWTWYEJVSJGBHXGJNCDELDCXDLGNYBYGXRCVYNSQYZTHYZTMEWQRZUQEFWSGZSMZKQWKDPABQVKOWDAAASUBMKIUJCAIUOJEEGQJVQMLNWBKAEKCWGDLRLHCPJMKXWQBCHKZXWMLUNVURHWQQCBJPILFRXPQVFRZMDYMBMZVCWSTFQJVSMEIWRPPREFMLYMYDMKEBLCDHWYMMIIFWMPTEEKXKQJVQXVUMHANSESZAQMNAUUXILSORELBWXYNUUJIBLXUQPTSGHHIDBFOOZEFEQICPHPLDAUEMRAEJWYRDGZJJHXYGBFMTOPIVGWAHSEVLHBUDZLIHLRRSQRASWPLKGWHMSHVKOSVXVSCXDKEQEXIUOLONAAZIYHWQQUCGMZDKRFHVSLLWLWSBHHOJJOTHXPZPJBWWAZGSHPPZCAXNYRPHYFSHVLQSBPIKSGITHQNOFEPIGMXFEOMEUHMPSEKTUUGMAOHHHWYOANYHAWOGKCKGJYYCDKXZEDLGUVNBRLRUBQDBMRJYTTFDUFHXPEWTKJZGGOHACAUDQXGCORDJKKOGPVDECBZMNASTQBVSBPXSOFWEWZOJLCPAAVECYFQLFKHWNCQOUQIIXHPUIDFUHUUHRBLQIBDONMMAREPNWZXUIMQRPVLZRHILKUBTXGHLVVLMZCZWEWSMJIDAFQBYYKJIGMDDTKQOHECJIDFMZZZKHENMVOMVAWFGIJMDVETFIXORATFASGMBLBPISBFSZKBIVNNTRJYCGMVHHAJBHVESZTCRWHJWTKGRZTKTEKVLYQSFQDIZAMTZHVQDEAZYMFROBDHFNESNUMUMPCOQQHPZDGCJIEJWLAKODTWSXOFTBBIQDWGVDYUIGZSQFBMSEZHHSFCQTJLULTNQPVOVTIDBJXRQBEJFDSOXXQPSCBNNUCFKXTHTEMUPKMGLSRSXLGUKZKCBLRQHTVTTPAMVNIKXWQKOJCNUKKEJWHMJYEQUAKNRKBMXJYWGPIWAMMVXWBIUKXDJBTFDDSUQTIPEJOMAWLAJXXIVZSPJPSURLZWRTTJOBYTMMFMLQNWPKGKLYZVQTRJFTFYMYHDCHWOWDBHWODLAJYMJXHZRAIYTOYGMHJQOHFKKGRIWWUWFSIRRRQKSZKLPITDPEUENZQAHKIDGEBOYMFQDVCXWNJLVERNLLTYMJYVTHACNBQMNVETSGQPTBCRGVGRIZRUKQRGZRIMVYYKVEDNLWEGXJZFEFYNGQJRIBZHUHVRHWCCAHRLFYUFHTKLZLYHBIALLZUFIPZPNBTOKNBSLXXSRHDSUEZXOCIZBCGKUFBJGXZTKDLXAKRTTWLOANLOPWNSAUEUZGGIFFDPIQOJAFEVBQJCFVSWTIOTCTODBWNGBSXKILVKQZGTRRXYOQUHYLBCERHFNXLOPIAYVXKNZSGSKERYUNGUYJYEAFLNCWDUGGUDDEQEXXXJBQHXDPTEYRIAYUPDSTXBBREGXVLWUIFXAPUDGPJFISHIOXNGSKJTDQZDLKZHUHEUYAAEPJLZDTHRSVAKHJDNZEQMRRTLAZIYZIFQTQPXLXODSOPBASOBXEOQYJBYLLZKTEDPWSMKRCPLTFNTZBUYIKOGUQEFBFRXJUOIPASGEHSXOFQOGLMOXBWRTDYWIQTUMJCBLWIQFANUHEIPRUGOXCIQFINQYIKNSMODKYTPAHJHNTXGODWNHGENPRFPBPCTDTZNRUCSBOBQHYYXDVLLBRAQIFGLWKHZDGMVAQPEEQWORVLWSYJTPLMZSUNOEUNKABFASWGYODOFYCEQANLSBZTTTGIAAVKAZRDRNLRDOGLOKPEKESEFRYZNGJPHGZJFSOYHAQKOYVFIMJURDBYXBZKHIZQPACUSSVZSLJJLHOVTZRMFSLCTKMDVNVMNXIFQDGKQRVDYLYSLQEQKRUGEGJZVELIEVPWZXIPOEVNPTHCLNUWFOEJUPKRVXZZSQXTNGLCKGRZZAENNYLUNPFJEPBZOCBJTYCGENKQTDSVFWKVUVPJMXTSOURDWUMRVQABEMSZQMWVIISEDIORFJJTFDYBZMVUDVWJHQKZCJXMRPQXXGQERAAWFAAENVZSQXBXNNZPWWBQLTNLCDRTFRSKUSRHNQZFPCECRDROZUENNTYRYPNGJFQDXJMMBNRQRVSIZJWADCNTXLKWDXEMEURBGFNHSGYJCSRDCQDHUTCUGPSJOWXTSOWYTKGNQGYUYSZCKFMEYQYEFSOWONPHCLFXXNNQVLMWDMANROURFSVMLLKBZZIDNQAMFPCBBRZEDZSWQMNVGKJTWUVVVFAIXCXDSBGTSFZVGTTWFGTOTDJPZGMUOMFLQCOIDWDYBDVKWPIEXCSQHDFGMTCAHHLYLCIRYMPCPKMLBUPZYJPFPXNBSQBAZOALQIERUVTJFHXJDOICYZJPYXQRNTTMHTZADDRYYMJGTGPYVZCVYMKZJCQYVLKEEMEJPXHQJTYEZPDWQFTOTFNEHFCEQPJWBPGSNPKWIKBKZGIPNCGHHVLRDQVTFGSIWACJPNHAZKKZQSQEWYNGUYXZOUUVDMDZMIKEXTEWEQVWKOCHMPPIQOJGKECNSHMFPYLMSPLYFIURWZYLOPVGDFNOLRBDAQKSQVGKKRIRAFJWEJJUBHDEMQUXJWAJOLBEIIRVZZMBGXYMJJJKQMQEELBNJEYXRCDBKUWLWLNCINRTWADPOWTSHXHQDHPWJUXTRUHNFWRPJIJHKOWYKSSTPBJSJAOSVNOOHVBORUECFNJPDIQQAKJRMVJVXZNSOBIWWJKPGORLDBCJLUZLFKCRFNMDOZXCDGABRLRZBKKHNPSYJTLODPFLETOSVNXYVXZPKSOODBXQQPRZICONSVYWPORKCOIZNJQAEHQHINZYEQZOTPBLLAJAOAMSQUUGFKIJRYSBNSZTIZHDOIQBIABZCNRVJNDRYLARLTTYNUTXVABMIRNTTRUWGNTSBWJBHLUUGNUTKNRFNSTXLJSFAMDIAWADSLEBXYVDOPZACQFRKBOVKHCMTFUVDXYXIEYHDVLTMKTQCAHMDYJNFMZATUYXRWUBBVJGSWBFGWXKYFYCFJPKXPMRLKQEJMFMHQSCMVHUREEPLERQOHCLYRELDURMHWYQPSSBNBWEICWTHNMVWQIWHNHLHYZQXYHOSBPGDLMLOIGXWSSSJARSNYDXZDNYDWMVYDDBPQMFYUCWNWRYYIQOIWLJBAJGXVBVZHWQXKXXEBUTZLTZVMNDIANLBWTYUUVVDRNADMYJPSDOFWNAIBFSDUFERYENVZKYSZBVLZHATKQYIDATGFNKAVQTTVIQWURPTSMGRTGMFWKQBMJKTYWTTMOPJYFGSWVLOJRHDZTIXFAZRJLLKHGDVXSFVYNOWIBNRTUWSQHSXHTRTEEDNKGIJBNFBCVXKWMERJCMZJEWRXNKBTPOEXYPYOUZQRZBONHFWJRXTXWMULYXFNNJMMYLAVMQMNTCBCIZMBXHZTVTEVTJKGUWSVHSQWLELEHMJRMXULETEBPIWIUGOOCJJMDBKOIVVPKEIYBCJHYNINXGXRMNGQWRCAVOQDKLUURCUSGDBESLTPRQJFERWCIACDPTIBGCVYGPSNUURMFNDZDMEJDAMODOTSJCTQGQQNHIABCTPKGSJMFPVKQHYVYUNJWIBCYRRHARKENZQVTBHARFLJOLEOFTYDBBIBTZIVTUBITSDMTNNKSATGLZVTSVYTWGUPIEMDYOLTGQIZDVMXXHEKHBDZWETUMPMUUYZUMMOUDWWITIGSPMCWNIYLMRFYIRVEQUZEJPZMLVWGFCYWQATDIROWKWVSNQXFMYMVNLJAIGGPKGLBIGGTZVPJTKEGCDOPDAKQNWQXCYMOGXPOGYHFTXROJXUMCKBFKNVZJNWNNKCTKTHQRRXMOOAXLXLNHMUUCPTLESZRCDMMWUEQLCCBQFAECMTLAOFCFBOMTPDVSQKQMQGZSLALQCRSOMDPALRIMHUFYZCSROJFFREXCGISJBMZOQOQBIYNRUUQWWKNLVTQNZPPGAKRBWQPOHGRRGGIBAAZZNMMIHEVHTNPTXIVVAMKHSBABILCKLDJAPVJZZEITRZOQHLMHYYRSZTTJEXUSADSQBBRAIZVBYKSFVGOVEHODBHPHFJZFMSXNTOQDNLFNXXUVDLQJSEOVMDDTMEYBWYQSMGVCUARTZMOEXFNRLEPZHUSUYTXXRNRDWMHQPZJQNAXKHMDSQSSYOMUNFTMWGDCERJUIKGZXGWJNINHBHZBYMVNTOZQWCSBTDXCOFDNNBXAJMKMVLNTZKGTAHJXJBAFEZJUFOISPFVATFNOQAKSLSLLAUKLXMSDMBYRPGLGLGHENUUGWEYHXJVZFFKCUDFGGDXYJIEWRLCEHZKEDKNCTIBYQOCKRISZNPXXZEVQPAXZZJDCUSHPBKQTYSFRAXROOQNPUIIMKFLJQQOKIVCLFSGGKNXNKQBAHQQDAYRLFEUVUIIFFKSLEZROMQBZHEZOUPTVPLIUPCSMLARQMJDQKWGXNKWUOXKLPDIEOQBEUTSFVJYHUDZFAFCPPAJGZTTOYBVPTWTNRLVMWTVQYWVABZPTZABZVUPUXKJQIEDZRYNPTKFSGBSKCKFCKGDGCSCZFLPNRSPITEXMPEEXHZHKJOOVWRBYLDXQQOEHJTRCXQOOVVMCUVMFKCAGTCFFHEVATZHCUBGURUIMPWRJSFQCIRKBVPIEWEERFOTCPBWGVGVLDMWXRPBBGLDDBNHZRMQZCLDRMBZHHUUMITLCIMDOYIRBWAAPOQOQBRHPSHWCDRQMKCOUOTIOCBPYBRPQJGIKXQZSZYWCROODQEXHYHXCIPALGRDQXMCXEEPDCNFVBWYUCVDCEAEMPGZYYFOVRQSVWJAYWFTADTWIQBKUBPITVIRTNHPGZHDWTDWPKSRQLPYCQIWUXFPVPIQEPFMOPPMKSJBEBTUMKSQBDNVCUMXLUQRJXDZMSMYMXAQYVNMFHDGKSDNOPMZJCQUATWONINZHPRFKERPMWWYOBNCRADCEVZGQVXFFKEMZYTJEMASJWRZAGETGHVNFUTVRSBWEHIDHDOMQPGZNXYNGCIOMEBTAXQSPTQUBBZKEQYUHFTWEUMKYUZMYAFBZWVRPLLSMMFRCDLLIHINDUZBQYQPBXSCTNTLYGFLTMCXQPLAWTPBPPFFPVWQSOTODMBCVIPOVTNLIYLHTDIISNQHKOADFTTIHUMCCBSXUGKFGYMABWKTMCCWRCBWXUEFORJTUCSRKDWSBKUEGHXSJBPAEQYBNDIDWSWQWPHIUFAXPXBWEAONBFQFYOJLTROPJNIHEPPYVSXMPAITAZIBEYJEPUPILGYXTGEXXUXUOWHDWRYWQGZXHKBWETGQBENUMTTMPSIDOPGKJGGZNHYWSAUWVAOWHDSTXLHMFQQTHYDQFLQUSOSMQMLNOBJVFDREQYSVOKOYJTOQGGMBXENPSADGCOCJSVPITHGKSWIDQYTYFFZCLPRDRWJVLNEDIVNEDVQXSYAKWVIDAKFNZZQSVBOGRULBQBHTWXSQXSAWNJZPVHCWIUODXCMQXZSNCZIBXARUUSQHDSYAZCWHYKMVNAMMAGBEHLFENXBHRTQWNOWMQSVQCKLRKZFKFGPNRWTGTWNMSDIFTGULYPBDZNWKOCWWINLCKGIFDYSVBCCXJWIJOKMNZLZNNYLXLWBXDMFIKXDNBHKMETYSDKHEXJRKJFIUBJUEVZMHYRVBZHOFAMZFYIJWTDGCIQZLCTSZSEHSYETZLHGOVFVWPHSJMALWTKHVDZUXGBRGHLFVULJQSGMHNGSBIEXBQHWUGRTOULUCYZZSMKIGQWQGEIHNOHOFONBUGULAHFEFHDYTPICGHSOLAXAPERWSEXPMRAMBFTGMYEIOPKWWCKJEHMVODRGJOXVIXJJFEPTFWDVLNRJRDUYMGTALNHWBGTJGFULJKGQIKLVZCETHARUJKUWXDTBKOMQTHDFTJXBVJYVNEOVEFPPRJMRNHUZVGPRPSYKDVNZELUUPKPUREJINXBCEVBCESTVKTGOOTPVFLPWVEQMKCWZZACEXFGDYBZKUHAKCPFHAWEVCWJMAIOAISGHXOLXPKILTKVVADFABJYEHJSIRGKBASJAGWXXIHIBSFWUKBUMMUSUEKEVTQZTIKTOGTLOCVPUCNQNPLZBFRXLDDHYTIUBSNRAIEQLZHHEUYRJLQNSJMEOQNNJVHNPWEPFJHSKOZOIZHUKZHDITHXLUMXRTKGPQXWBEOOUQEEPMYCLHFWDOTOKHLBAXJRQIQROGHIWMMOYNQLUXHXNCOXJBALZLFRTVIHBQRAEDQCQINNFXKUZARJCTUDEZUZWEGAWZAACQEVYUIFRUZQVSZXNWATXWSUAAWXZWXBOCYOYGVPDWFYQHXDFZWCVQYVQUSPSSSIWRYUZTJCRQCHZBMEAKJVAJTQGLFYFYJBRHVQDEVWXZEWBQBBBKZDVSUBFBALZLMSUIJXOGULFAIISJKVVJZQBTSGUURWFGOBOZZEHVQPXAXPLHNGSMYVHSCDOVBVDSXTTYYBVOQSQNJBXWJPKHLTCPZSMAOQUNJOLJPGZHAPWJQTIZLUJYONNNFBPVTKIFYVOPDOYDDUPWQXVBTGZHTOWZPMWLWFQWAENEUNJAJYWZXTCRADAVRXWJJTWHAMFAQUGNHSNQQLSQEUJGAJETIAETVACVMHYFDGSKYHDRSVJYRSHRDLLMNPFJQKGEREJXNDJLKMCEJNDBFMULXHXMZEXPOEVIKFFXKOLVDPBMDEPISMTPTSESZBJPFFXSMEPWVATYQVMTBCDUOZLJTPCSRLIWSHOEMGBHIUHYPTTRXZNNYYXTOBMFMWDHDULRCOAKJHLADETAFGQDFNZVOLACJFJMBXGDLGOWQZXTFSVLZLQGAPBOCDTLIEAMBGPNMDLCEIXKBTVCGLIHDLXFOSRYXRKAXCPLFBQKJNWMIRQREAAHLXNBSGCPZORYQHJWIBITRGGBXYSDZSLKSAOKGQBFESFXZOVJSFDJLLKIJDLIXYVPAJBIBCNHXUEYJZIBENMPYWZJBNUZNPQOASWDWMKTGRSRSCUZPGONDQYGFSFSJYGLQFOORBIZSCRMELLVSCIXSIDXBLRKJYWZFMNWNXVHBOWFAHAUJKR", 1552
#     merge_the_tools(string, k)

# n = int(input())
# words = [input() for i in range(n)]
# index = 0
# lst = []
# quant = ""
#
# for word in words:
#     if word not in lst:
#         lst.append(word)
#         count = 1
#         index += 1
#         for i in (range(index, len(words))):
#             if words[i] == word:
#                 count += 1
#         quant += str(count) + " "
# print(len(lst))
# print(quant.strip())


# def sum_strings(x, y):
#     if x == "":
#         x = "0"
#     if y == "":
#         y = "0"
#     x_n = [i for i in x]
#     y_n = [i for i in y]
#
#     ad = 0
#     to_return = ""
#     choise1 = [x_n, y_n][len(x_n) > len(y_n)]
#     choise2 = [x_n, y_n][len(x_n) < len(y_n)]
#     for n in range(len(choise1)):
#         res = int(y_n[~n]) + int(x_n[~n]) + ad
#         if res > 9:
#             ad = 1
#             res -= 10
#         else:
#             ad = 0
#         choise2[~n] = res
#     if ad == 1:
#         if n + 1 < len(choise2):
#             while n+1 < len(choise2):
#                 res = int(choise2[~(n + 1)]) + ad
#                 if res > 9:
#                     ad = 1
#                     res -= 10
#                 else:
#                     ad = 0
#                 choise2[~(n + 1)] = res
#                 n += 1
#         else:
#             to_return = str(ad)
#     if ad == 1:
#         to_return = str(ad)
#     for i in choise2:
#         to_return += str(i)
#     return to_return.lstrip("0")
#
# print(sum_strings("10", "990"))

# def is_prime(numb):
#     if numb < 2:
#         return False
#     for j in range(2, int(numb**0.5) + 1):
#         if numb % j == 0:
#             return False
#     return True
#
#
# def get_total_primes(a, b):
#     count = 0
#     for i in range(a, b):
#         if is_prime(i) and all(digit in "2357" for digit in str(i)):
#             count += 1
#             # print(i)
#
#     return count
#
# print(get_total_primes(10, 100))


# b = 2000000
# a = [6 * i - 1 for i in range(2, b // 5)] + [6 * i + 1 for i in range(2, b // 5)]

# def is_prime(numb):
#     if numb < 2:
#         return False
#     for j in range(2, int(numb**0.5) + 1):
#         if numb % j == 0:
#             return False
#     return True
#
#
# def get_total_primes(a, b):
#     count = 0
#     for numb in [6 * i - 1 for i in range(2, b // 5)] + [6 * i + 1 for i in range(2, b // 5)]:
#         if numb > a and is_prime(numb) and all(digit in "2357" for digit in str(numb)):
#             count += 1
#     return count
#
#
# def generate_prime(from_value, to_value):
#     #primes = [True] * (to_value)
#     #primes[0] = primes[1] = False
#
#     return [n for n in range(from_value if from_value % 2 else from_value + 1, to_value) if n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1))]
#
# print(generate_prime(10, 100))
# def generate_prime(start, end):
#     prime1 = set(6 * i - 1 for i in range(end//5) if start < 6 * i - 1 < end)
#     prime2 = set(6 * i + 1 for i in range(end//5) if start < 6 * i + 1 < end)
#     primes = sorted(list(prime1 | prime2))
#     return primes
#
# print(generate_prime(10, 100))
#
# def generate_prime(start, end):
#     primes = [str(i) for i in range(start if start % 2 else start + 1, end, 2) if (i - 1) % 6 == 0 or (i + 1) % 6 == 0]
#     return primes
#
# print(generate_prime(10, 100))
# #
# def generate_prime(from_value, to_value):
#     primes = [True] * (to_value)
#     primes[0] = primes[1] = False
#
#     # Iterate through all numbers starting from 2
#     for i in range(2, int(to_value ** 0.5) + 1):
#         if primes[i]:
#             # Mark multiples of i as not prime
#             for j in range(i * i, to_value, i):
#                 primes[j] = False
# #
# #     # Return the list of prime numbers in the specified range
# #     return [num for num in range(from_value, to_value) if primes[num]]
#     return [str(num) for num, is_prime in enumerate(primes) if is_prime]
# # def get_total_primes(a, b):
# #     count = 0
# #     for i in generate_prime(a, b):
# #         if all(digit in "2357" for digit in str(i)):
# #             count += 1
# #             print(i)
# #
# #     return count
#
#
# print(generate_prime(10, 100))

def scramble(s1, s2):
    count = 0
    s1 = list(s1)
    s2 = list(s2)
    length = len(s1)
    for i in range(length):
        for j in range(len(s2)):
            if s1[i] == s2[j]:
                print(s1[i])
                s1[i] = 0
                s2[j] = 1
                count += 1
    if count == len(s2):
        return True
    return False

def scramble(s1, s2):
    s1_count = {}
    s2_count = {}
    for i in s1:
        s1_count[i] = s1_count.get(i, 0) + 1
    for j in s2:
        s2_count[j] = s2_count.get(j, 0) + 1

    for char, count in s2_count.items():
        if s1_count.get(char, 0) < count:
            return False
    return True

s1 = "cedewaraaossoqqyt"
s2 = "codewars"
print(scramble(s1, s2))

